/* * Created By  Zaynab Osama ,  On  2/25/19 9:40 PM */package recipe.controllers;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import recipe.commands.IngredientCommand;import recipe.commands.RecipeCommand;import recipe.services.IngredientService;import recipe.services.RecipeService;import recipe.services.UnitOfMeasureService;import static recipe.utility.ModelName.*;import static recipe.utility.ViewName.*;@Slf4j@Controllerpublic class IngredientController {    private RecipeService recipeService;    private IngredientService ingredientService;    private UnitOfMeasureService unitOfMeasureService;    @Autowired    public IngredientController(RecipeService recipeService, IngredientService ingredientService, UnitOfMeasureService unitOfMeasureService) {        this.recipeService = recipeService;        this.ingredientService = ingredientService;        this.unitOfMeasureService = unitOfMeasureService;    }    /**     * @param recipeId : Selected Recipe ID     * @param model    :Model Of RecipeCommand To append     * @return : Forward To List All Recipe Ingredients     */    @GetMapping("/recipe/{recipeId}/ingredients")    public String listRecipeIngredients(@PathVariable String recipeId, Model model) {        log.debug("Getting ingredient list for recipe id: " + recipeId);        model.addAttribute(M_RECIPE, recipeService.findCommandById(Long.valueOf(recipeId)));        return INGREDIENT_LIST;    }    @GetMapping("recipe/{recipeId}/ingredient/{id}/show")    public String showRecipeIngredient(@PathVariable String recipeId,                                       @PathVariable String id, Model model) {        model.addAttribute(M_INGREDIENT, ingredientService.findByRecipeIdAndIngredientId(Long.valueOf(recipeId), Long.valueOf(id)));        return SHOW_INGREDIENT;    }    @GetMapping("recipe/{recipeId}/ingredient/new")    public String newIngredient(@PathVariable String recipeId, Model model) {        RecipeCommand recipeCommand = recipeService.findCommandById(Long.valueOf(recipeId));        IngredientCommand ingredientCommand = new IngredientCommand();        ingredientCommand.setRecipeId(Long.valueOf(recipeId));        model.addAttribute(M_INGREDIENT, ingredientCommand);        model.addAttribute(M_UOM_LIST, unitOfMeasureService.getAllCommandUoms());        return INGREDIENT_FORM;    }    @PostMapping("recipe/{recipeId}/ingredient")    public String saveOrUpdate(@ModelAttribute IngredientCommand command) {        IngredientCommand savedCommand = ingredientService.saveIngredientCommand(command);        savedCommand.setRecipeId(command.getRecipeId());        return String.format("%s%x%s", REDIRECT_RECIPE, savedCommand.getRecipeId(), V_INGREDIENTS);    }    @GetMapping("recipe/{recipeId}/ingredient/{id}/update")    public String updateRecipeIngredient(@PathVariable String recipeId,                                         @PathVariable String id, Model model) {        model.addAttribute(M_INGREDIENT, ingredientService.findByRecipeIdAndIngredientId(Long.valueOf(recipeId), Long.valueOf(id)));        model.addAttribute(M_UOM_LIST, unitOfMeasureService.getAllCommandUoms());        model.addAttribute(M_RECIPE_ID, Long.valueOf(recipeId));        return SHOW_INGREDIENT;    }    @GetMapping("recipe/{recipeId}/ingredient/{id}/delete")    public String deleteIngredient(@PathVariable String recipeId,                                   @PathVariable String id) {        log.debug("deleting ingredient id:" + id);        ingredientService.deleteById(Long.valueOf(recipeId), Long.valueOf(id));        return String.format("%s%x%s", REDIRECT_RECIPE, Long.parseLong(recipeId), V_INGREDIENTS);    }}