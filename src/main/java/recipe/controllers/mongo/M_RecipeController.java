package recipe.controllers.mongo;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Profile;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import recipe.commands.mongo.M_IngredientCmd;import recipe.commands.mongo.M_RecipeCmd;import recipe.repositories.mongo.CategoryMongoRepo;import recipe.services.mongo.RecipeMongoService;import java.util.Set;import java.util.UUID;import static recipe.utility.Mapping.MONGO_RECIPE;import static recipe.utility.Mapping.M_NEW_RECIPE;import static recipe.utility.ModelName.M_CATEGORIES;import static recipe.utility.ModelName.M_RECIPE;import static recipe.utility.ViewName.*;@Slf4j@Controller@Profile("mongoDb")public class M_RecipeController {    private RecipeMongoService recipeService;    private CategoryMongoRepo categoryMongoRepo;    @Autowired    public M_RecipeController(RecipeMongoService recipeService, CategoryMongoRepo categoryMongoRepo) {        this.recipeService = recipeService;        this.categoryMongoRepo = categoryMongoRepo;    }    /**     * @param id:   M_Recipe ID     * @param model :ThemLeaf Appended Model     * @return: The Matched M_Recipe To The Model.     */    @GetMapping("/mongo/recipe/{id}/show")    public String showById(@PathVariable String id, Model model) {        model.addAttribute(M_RECIPE, recipeService.findRecipeById(id));        return M_SHOW_RECIPE;    }    /**     * @param model: :ThemLeaf Appended Model     * @return: Specified Model To Add New M_Recipe     */    @GetMapping(M_NEW_RECIPE)    public String newRecipe(Model model) {        M_RecipeCmd recipeCommand = new M_RecipeCmd();        recipeCommand.setCategory(recipeCommand.getCategory());        recipeCommand.setIngredients(recipeCommand.getIngredients());        recipeCommand.setFlag(true);        model.addAttribute(M_RECIPE, recipeCommand);        model.addAttribute(M_CATEGORIES, this.categoryMongoRepo.findAll());        return M_RECIPE_FORM;    }    /**     * @param id:    M_Recipe ID     * @param model: :ThemLeaf Appended Model     * @return: Specified Model To Update New M_Recipe     */    @GetMapping("/mongo/recipe/{id}/update")    public String updateRecipe(@PathVariable String id, Model model) {        if (null == id || id.isEmpty()) {            throw new NumberFormatException(String.format("%s%s", "Invalid Recipe Id ", id));        }        M_RecipeCmd recipeCommand = recipeService.findCommandById(id);        recipeCommand.setFlag(false);        model.addAttribute(M_RECIPE, recipeCommand);        model.addAttribute(M_CATEGORIES, this.categoryMongoRepo.findAll());        return M_RECIPE_FORM;    }    /**     * @param command: RecipeCommand To Save Or Update.     * @return: Saved Or Updated M_Recipe     */    @PostMapping(MONGO_RECIPE)    public String saveOrUpdate(@ModelAttribute M_RecipeCmd command, Model model) {        Set<M_IngredientCmd> ingredients = command.getIngredients();        ingredients.stream().forEach(ingredient -> ingredient.setId(UUID.randomUUID().toString()));        command.setIngredients(ingredients);        M_RecipeCmd savedCommand = recipeService.saveRecipeCommand(command);        model.addAttribute(M_RECIPE, savedCommand);        return M_SHOW_RECIPE;    }    /**     * @param id: M_Recipe ID To delete.     * @return : redirect to Index Page To Make Sure That The M_Recipe is deleted.     */    @GetMapping("/mongo/recipe/{id}/delete")    public String deleteById(@PathVariable String id) {        log.debug("Deleting id: " + id);        if (null == id || id.isEmpty()) {            throw new NumberFormatException(String.format("%s%s", "Invalid M_Recipe Id ", id));        }        recipeService.deleteById(id);        return M_HOME_REDIRECT;    }}