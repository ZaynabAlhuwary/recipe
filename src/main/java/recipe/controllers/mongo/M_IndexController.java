package recipe.controllers.mongo;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Profile;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import recipe.domain.mongo.M_Recipe;import recipe.services.mongo.RecipeMongoService;import java.util.Optional;import static recipe.utility.Mapping.M_HOME_INDEX;import static recipe.utility.ModelName.M_RECIPES;import static recipe.utility.ViewName.M_HOME_VIEW;@Slf4j@Controller@Profile("mongoDb")public class M_IndexController {    private RecipeMongoService recipeService;    @Autowired    public M_IndexController(RecipeMongoService recipeService) {        this.recipeService = recipeService;    }    @RequestMapping(M_HOME_INDEX)    public String mGetRecipes(Model model, @RequestParam("currentPage") Optional<Integer> currentPage) {        log.debug("Inside Get Mongo Recipes");        final int pageSize = 2;        int currPage = currentPage.orElse(0);        Pageable pageable = PageRequest.of(currPage, pageSize);        Page<M_Recipe> recipePage = recipeService.getRecipes(pageable);        model.addAttribute("totalPages", recipePage.getTotalPages());        model.addAttribute("currentPage", currPage);        model.addAttribute(M_RECIPES, recipePage.getContent());        return M_HOME_VIEW;    }}