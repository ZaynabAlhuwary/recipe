/* * Created By  Zaynab Osama ,  On  2/25/19 9:40 PM */package recipe.controllers.mongo;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Profile;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import recipe.domain.mongo.M_Ingredient;import recipe.domain.mongo.M_Recipe;import recipe.repositories.mongo.UnitOfMeasureMongoRepo;import recipe.services.mongo.RecipeMongoService;import java.util.Set;import java.util.UUID;import static recipe.utility.ModelName.*;import static recipe.utility.ViewName.*;@Slf4j@Controller@Profile("mongoDb")public class M_IngredientController {    private RecipeMongoService recipeService;    private UnitOfMeasureMongoRepo uomRepo;    @Autowired    public M_IngredientController(RecipeMongoService recipeService, UnitOfMeasureMongoRepo uomRepo) {        this.recipeService = recipeService;        this.uomRepo = uomRepo;    }    /**     * @param recipeId : Selected M_Recipe ID     * @param model    :Model Of RecipeCommand To append     * @return : Forward To List All M_Recipe Ingredients     */    @GetMapping("/mongo/recipe/{recipeId}/ingredients")    public String listRecipeIngredients(@PathVariable String recipeId, Model model) {        log.debug("Getting ingredient list for recipe id: " + recipeId);        model.addAttribute(M_RECIPE_ID, recipeId);        model.addAttribute(M_INGREDIENTS, (recipeService.findCommandById(recipeId)).getIngredients());        return M_INGREDIENT_LIST;    }    @GetMapping("/mongo/recipe/{recipeId}/ingredient/{id}/show")    public String showRecipeIngredient(@PathVariable String recipeId,                                       @PathVariable String id, Model model) {        Set<M_Ingredient> ingredients = (recipeService.findRecipeById(recipeId)).getIngredients();        M_Ingredient ingredient = ingredients.stream()                .filter(m_ingredient -> m_ingredient.getId().equals(id))                .findFirst().get();        model.addAttribute(M_INGREDIENT, ingredient);        return M_SHOW_INGREDIENT;    }    @GetMapping("/mongo/recipe/{recipeId}/ingredient/new")    public String newIngredient(@PathVariable String recipeId, Model model) {        Set<M_Ingredient> ingredients = (recipeService.findRecipeById(recipeId)).getIngredients();        M_Ingredient ingredient = new M_Ingredient();        ingredient.setId(UUID.randomUUID().toString());        model.addAttribute(M_RECIPE_ID, recipeId);        model.addAttribute(M_INGREDIENT, ingredient);        model.addAttribute(M_UOM_LIST, this.uomRepo.findAll());        return M_INGREDIENT_FORM;    }    @GetMapping("mongo/recipe/{recipeId}/ingredient/{id}/update")    public String updateRecipeIngredient(@PathVariable String recipeId,                                         @PathVariable String id, Model model) {        Set<M_Ingredient> ingredients = (recipeService.findRecipeById(recipeId)).getIngredients();        M_Ingredient ingredient = ingredients.stream()                .filter(m_ingredient -> m_ingredient.getId().equals(id))                .findFirst().get();        model.addAttribute(M_INGREDIENT, ingredient);        model.addAttribute(M_UOM_LIST, this.uomRepo.findAll());        model.addAttribute(M_RECIPE_ID, recipeId);        return M_INGREDIENT_FORM;    }    @PostMapping("mongo/recipe/{recipeId}/ingredient")    public String saveOrUpdate(@ModelAttribute M_Ingredient command, @PathVariable String recipeId, Model model) {        M_Recipe recipe = recipeService.findRecipeById(recipeId);        Set<M_Ingredient> ingredients = recipe.getIngredients();        if (command.getId() == null) {            command.setId(UUID.randomUUID().toString());        }        ingredients.removeIf(ing -> ing.getId().equals(command.getId()));        ingredients.add(command);        recipe.setIngredients(ingredients);        recipeService.saveRecipe(recipe);        model.addAttribute(M_RECIPE_ID, recipeId);        model.addAttribute(M_INGREDIENTS, recipe.getIngredients());        return M_INGREDIENT_LIST;    }    @GetMapping("mongo/recipe/{recipeId}/ingredient/{id}/delete")    public String deleteIngredient(@PathVariable String recipeId,                                   @PathVariable String id, Model model) {        M_Recipe recipe = recipeService.findRecipeById(recipeId);        Set<M_Ingredient> ingredients = recipe.getIngredients();        ingredients.removeIf(ing -> ing.getId().equals(id));        recipe.setIngredients(ingredients);        recipeService.saveRecipe(recipe);        model.addAttribute(M_RECIPE_ID, recipeId);        model.addAttribute(M_INGREDIENTS, ingredients);        return M_INGREDIENT_LIST;    }}