package recipe.bootstrap;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.ApplicationListener;import org.springframework.context.annotation.Profile;import org.springframework.context.event.ContextRefreshedEvent;import org.springframework.stereotype.Component;import recipe.domain.Category;import recipe.domain.UnitOfMeasure;import recipe.repositories.CategoryRepository;import recipe.repositories.UnitOfMeasureRepository;@Slf4j@Component@Profile({"dev", "prod"})public class BootStartpMySQL implements ApplicationListener<ContextRefreshedEvent> {    private final CategoryRepository categoryRepository;    private final UnitOfMeasureRepository measureRepository;    @Autowired    public BootStartpMySQL(final CategoryRepository categoryRepository, final UnitOfMeasureRepository measureRepository) {        this.categoryRepository = categoryRepository;        this.measureRepository = measureRepository;    }    @Override    public void onApplicationEvent(ContextRefreshedEvent contextRefreshedEvent) {        if (this.categoryRepository.count() == 0l) {            log.info("load Category Data");            loadCategories();        }        if (this.measureRepository.count() == 0l) {            log.info("load Unit Of Measure Data");            loadUOM();        }    }    private void loadUOM() {        Category american = new Category();        american.setDescription("American");        this.categoryRepository.save(american);        Category egyptian = new Category();        egyptian.setDescription("Egyptian");        this.categoryRepository.save(egyptian);        Category italian = new Category();        italian.setDescription("Italian");        this.categoryRepository.save(italian);        Category fast_Food = new Category();        fast_Food.setDescription("Fast Food");        this.categoryRepository.save(fast_Food);    }    private void loadCategories() {        UnitOfMeasure ounce = new UnitOfMeasure();        ounce.setUom("Ounce");        this.measureRepository.save(ounce);        UnitOfMeasure teasPoon = new UnitOfMeasure();        teasPoon.setUom("TeasPoon");        this.measureRepository.save(teasPoon);        UnitOfMeasure tablePoon = new UnitOfMeasure();        tablePoon.setUom("TablePoon");        this.measureRepository.save(tablePoon);        UnitOfMeasure cup = new UnitOfMeasure();        cup.setUom("Cup");        this.measureRepository.save(cup);        UnitOfMeasure pinch = new UnitOfMeasure();        pinch.setUom("Pinch");        this.measureRepository.save(pinch);    }}