/* *  Created By  Zaynab Osama ,  On 2/23/19 2:42 PM **/package recipe.bootstrap;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.ApplicationListener;import org.springframework.context.annotation.Profile;import org.springframework.context.event.ContextRefreshedEvent;import org.springframework.stereotype.Component;import recipe.domain.*;import recipe.repositories.RecipeRepository;import recipe.services.CategoryService;import recipe.services.IngredientService;import recipe.services.NotesService;import recipe.services.UnitOfMeasureService;import javax.transaction.Transactional;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import java.util.Optional;@Slf4j@Component@Profile("default")public class OnloadData implements ApplicationListener<ContextRefreshedEvent> {    private RecipeRepository recipeRepository;    private NotesService notesService;    private IngredientService ingredientService;    private UnitOfMeasureService unitOfMeasureService;    private CategoryService categoryService;    @Autowired    public OnloadData(RecipeRepository recipeRepository, CategoryService categoryService, IngredientService ingredientService, NotesService notesService, UnitOfMeasureService unitOfMeasureService) {        this.recipeRepository = recipeRepository;        this.categoryService = categoryService;        this.notesService = notesService;        this.ingredientService = ingredientService;        this.unitOfMeasureService = unitOfMeasureService;    }    private List<Recipe> loadData() {        //Units Of Measure        Optional<UnitOfMeasure> ounce = unitOfMeasureService.findByUom("Ounce");        Optional<UnitOfMeasure> TeasPoon = unitOfMeasureService.findByUom("TeasPoon");        Optional<UnitOfMeasure> TablePoon = unitOfMeasureService.findByUom("TablePoon");        Optional<UnitOfMeasure> cup = unitOfMeasureService.findByUom("Cup");        //Recipes        Recipe perfectGuacamole = new Recipe();        perfectGuacamole.setDescription("The Best guacamole! So easy to make with ripe avocados!");        perfectGuacamole.setDifficulty(Difficulty.EASY);        perfectGuacamole.setPrepTime(15);        perfectGuacamole.setCookTime(20);        perfectGuacamole.setUrl("https://www.simplyrecipes.com/recipes/perfect_guacamole/");        perfectGuacamole.setUrl("https://www.simplyrecipes.com/recipes/chickenWithRice/");        perfectGuacamole.setDirections("These are Chickn With Rice Direction For Test");        //second recipe        Recipe chickenWithRice = new Recipe();        chickenWithRice.setDescription("Chickn With Rice! So easy to make with ripe rice!");        chickenWithRice.setDifficulty(Difficulty.EASY);        chickenWithRice.setPrepTime(30);        chickenWithRice.setCookTime(2);        chickenWithRice.setUrl("https://www.simplyrecipes.com/recipes/chickenWithRice/");        chickenWithRice.setDirections("These are Chickn With Rice Direction For Test");        Recipe beans = new Recipe();        beans.setDescription("Eypation Beans");        beans.setDifficulty(Difficulty.EASY);        beans.setPrepTime(30);        beans.setCookTime(2);        beans.setUrl("https://www.simplyrecipes.com/recipes/beans/");        beans.setDirections("These are Beans With Bread Direction For Test");        //Categories        Optional<Category> egyptian = categoryService.findByDescription("Egyptian");        perfectGuacamole.addIngredient(new Ingredient("avocados", new BigDecimal(2), ounce.get()));        perfectGuacamole.addIngredient(new Ingredient("Kosher Salt", new BigDecimal(1 / 2), TablePoon.get()));        perfectGuacamole.getIngredients().add(new Ingredient("lemon juice", new BigDecimal(1), cup.get()));        perfectGuacamole.addIngredient(new Ingredient("red onion", new BigDecimal(1 / 4), TeasPoon.get()));        // second recipe ingredients        chickenWithRice.addIngredient(new Ingredient("chicken", BigDecimal.valueOf(2), ounce.get()));        chickenWithRice.addIngredient(new Ingredient("Rice", BigDecimal.valueOf(2), cup.get()));        chickenWithRice.addIngredient(new Ingredient("oil", BigDecimal.valueOf(1 / 4), cup.get()));        chickenWithRice.addIngredient(new Ingredient("red onion", BigDecimal.valueOf(1 / 4), TeasPoon.get()));        // Third M_Recipe        beans.addIngredient(new Ingredient("chicken", BigDecimal.valueOf(2), ounce.get()));        beans.addIngredient(new Ingredient("Rice", BigDecimal.valueOf(2), cup.get()));        beans.addIngredient(new Ingredient("oil", BigDecimal.valueOf(1 / 4), cup.get()));        beans.addIngredient(new Ingredient("red onion", BigDecimal.valueOf(1 / 4), TeasPoon.get()));        perfectGuacamole.setCategory(egyptian.get());        //second M_Ingredient Categories        chickenWithRice.setCategory(egyptian.get());        Note guacamoleNote = new Note();        guacamoleNote.setRecipeNotes("The trick to making perfect guacamole is using ripe avocados that are just the right amount of ripeness. " +                "Not ripe enough and the avocado will be hard and tasteless. " +                "Too ripe and the taste will be off.");        guacamoleNote.setRecipe(perfectGuacamole);        perfectGuacamole.setNote(guacamoleNote);        // Second Ingredients Notes        Note chickenWithRiceNotes = new Note();        guacamoleNote.setRecipeNotes("The trick to making perfect chickenWithRice is using ripe rice " +                "that are just the right amount of ripeness. Not ripe enough and ");        chickenWithRiceNotes.setRecipe(chickenWithRice);        chickenWithRice.setNote(chickenWithRiceNotes);        beans.setCategory(egyptian.get());        Note beansNote = new Note();        beansNote.setRecipeNotes("The trick to making perfect beans is using ripe avocados that are just the right amount of ripeness. " +                "Not ripe enough and the avocado will be hard and tasteless. " +                "Too ripe and the taste will be off.");        beansNote.setRecipe(beans);        beans.setNote(beansNote);        List<Recipe> recipes = new ArrayList<Recipe>();        recipes.add(perfectGuacamole);        recipes.add(chickenWithRice);        recipes.add(beans);        return recipes;    }    @Override    @Transactional    public void onApplicationEvent(ContextRefreshedEvent contextRefreshedEvent) {        List<Recipe> recipes = loadData();        recipeRepository.saveAll(recipes);    }}