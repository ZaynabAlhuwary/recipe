package recipe.converters.mongo;import lombok.Synchronized;import org.springframework.core.convert.converter.Converter;import org.springframework.lang.Nullable;import org.springframework.stereotype.Component;import recipe.commands.mongo.M_RecipeCmd;import recipe.domain.mongo.M_Recipe;@Componentpublic class M_RecipeCmdToRecipe implements Converter<M_RecipeCmd, M_Recipe> {    private M_NoteCommandToNote toNote;    private M_CategoryCmdToCategory toCategory;    private M_IngredientCmdToIngredient toIngredient;    public M_RecipeCmdToRecipe(M_NoteCommandToNote toNote, M_CategoryCmdToCategory toCategory, M_IngredientCmdToIngredient toIngredient) {        this.toNote = toNote;        this.toCategory = toCategory;        this.toIngredient = toIngredient;    }    @Synchronized    @Nullable    @Override    public M_Recipe convert(M_RecipeCmd recipeCmd) {        if (null == recipeCmd) {            return null;        }        M_Recipe recipe = new M_Recipe();        recipe.setId(recipeCmd.getId());        recipe.setDescription(recipeCmd.getDescription());        recipe.setCookTime(recipeCmd.getCookTime());        recipe.setPrepTime(recipeCmd.getPrepTime());        recipe.setUrl(recipeCmd.getUrl());        recipe.setDirections(recipeCmd.getDirections());        recipe.setFlag(recipeCmd.isFlag());        if ((recipeCmd.getIngredients() != null) && (recipeCmd.getIngredients().size() > 0)) {            recipeCmd.getIngredients()                    .forEach(ingredient ->                            recipe.getIngredients().add(toIngredient.convert(ingredient)));        }        if (recipeCmd.getCategory() != null) {            recipe.setCategory(this.toCategory.convert(recipeCmd.getCategory()));        }        recipe.setMNote(this.toNote.convert(recipeCmd.getNote()));        recipe.setDifficulty(recipeCmd.getDifficulty());        return recipe;    }}