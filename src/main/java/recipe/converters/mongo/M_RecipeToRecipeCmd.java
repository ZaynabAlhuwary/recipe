package recipe.converters.mongo;import org.springframework.core.convert.converter.Converter;import org.springframework.stereotype.Component;import recipe.commands.mongo.M_RecipeCmd;import recipe.domain.mongo.M_Recipe;@Componentpublic class M_RecipeToRecipeCmd implements Converter<M_Recipe, M_RecipeCmd> {    private M_NoteToNoteCommand toNoteCmd;    private M_CategoryToCategoryCmd toCategoryCmd;    private M_IngredientToIngredientCmd toIngredientCmd;    public M_RecipeToRecipeCmd(M_NoteToNoteCommand toNoteCmd, M_CategoryToCategoryCmd toCategoryCmd, M_IngredientToIngredientCmd toIngredientCmd) {        this.toNoteCmd = toNoteCmd;        this.toCategoryCmd = toCategoryCmd;        this.toIngredientCmd = toIngredientCmd;    }    @Override    public M_RecipeCmd convert(M_Recipe recipe) {        if (null == recipe) {            return null;        }        M_RecipeCmd recipeCmd = new M_RecipeCmd();        recipeCmd.setId(recipe.getId());        recipeCmd.setDescription(recipe.getDescription());        recipeCmd.setCookTime(recipe.getCookTime());        recipeCmd.setPrepTime(recipe.getPrepTime());        recipeCmd.setUrl(recipe.getUrl());        recipeCmd.setDirections(recipe.getDirections());        recipeCmd.setFlag(recipe.isFlag());        if ((recipe.getIngredients() != null) && (recipe.getIngredients().size() > 0)) {            recipe.getIngredients()                    .forEach(ingredient ->                            recipeCmd.getIngredients().add(this.toIngredientCmd.convert(ingredient)));        }        if (recipe.getCategory() != null) {            recipeCmd.setCategory(this.toCategoryCmd.convert(recipe.getCategory()));        }        recipeCmd.setMNote(this.toNoteCmd.convert(recipe.getNote()));        recipeCmd.setDifficulty(recipe.getDifficulty());        return recipeCmd;    }}