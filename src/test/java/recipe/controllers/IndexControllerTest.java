package recipe.controllers;import org.junit.Before;import org.junit.Test;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.ui.Model;import recipe.domain.Recipe;import recipe.services.RecipeService;import java.util.HashSet;import java.util.Set;import static org.junit.Assert.assertEquals;import static org.mockito.Mockito.*;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;import static recipe.utility.Mapping.INDEX;import static recipe.utility.ModelName.M_INDEX;import static recipe.utility.ViewName.HOME_VIEW;public class IndexControllerTest {    @Mock    RecipeService recipeService;    @Mock    Model model;    IndexController indexController;    MockMvc mockMvc;    @Before    public void setUp() throws Exception {        MockitoAnnotations.initMocks(this);        indexController = new IndexController(recipeService);    }    @Test    public void getRecipes() throws Exception {        mockMvc = MockMvcBuilders.standaloneSetup(indexController).build();        mockMvc.perform(get(""))                .andExpect(status().isOk())                .andExpect(view().name(HOME_VIEW));        Set<Recipe> recipes = new HashSet<Recipe>();        recipes.add(new Recipe());        when(recipeService.getRecipes()).thenReturn(recipes);        verify(recipeService, times(1)).getRecipes();        assertEquals(1, recipeService.getRecipes().size());        assertEquals(M_INDEX, indexController.getRecipes(model));    }}