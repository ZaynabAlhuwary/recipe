package recipe.controllers;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Disabled;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageImpl;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.test.context.junit.jupiter.SpringExtension;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.ui.Model;import recipe.domain.Recipe;import recipe.services.RecipeService;import java.util.ArrayList;import java.util.List;import static org.mockito.Mockito.when;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;import static recipe.utility.Mapping.HOME_INDEX;import static recipe.utility.ViewName.HOME_VIEW;@ExtendWith(SpringExtension.class)public class IndexControllerTest {    @Mock    RecipeService recipeService;    @Mock    Model model;    IndexController indexController;    MockMvc mockMvc;    @BeforeEach    public void setUp() throws Exception {        MockitoAnnotations.initMocks(this);        indexController = new IndexController(recipeService);        mockMvc = MockMvcBuilders.standaloneSetup(indexController).build();    }    @Test    public void getRecipes() throws Exception {        mockMvc.perform(get(HOME_INDEX))                .andExpect(status().isOk())                .andExpect(view().name(HOME_VIEW));        List<Recipe> recipes = new ArrayList<>();        recipes.add(new Recipe());        Page page = new PageImpl(recipes);        page.getContent();        Pageable pageable = PageRequest.of(1, 3);        when(this.recipeService.getRecipes(pageable)).thenReturn(page);        /*verify(recipeService, times(1)).getRecipes(page);        assertEquals(1, recipeService.getRecipes(page).getContent().size());*/        // assertEquals(M_INDEX, indexController.getRecipes(model,1));    }}