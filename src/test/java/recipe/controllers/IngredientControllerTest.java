package recipe.controllers;import org.junit.Before;import org.junit.Test;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import org.springframework.http.MediaType;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import recipe.commands.IngredientCommand;import recipe.commands.RecipeCommand;import recipe.services.IngredientService;import recipe.services.RecipeService;import recipe.services.UnitOfMeasureService;import static org.mockito.ArgumentMatchers.any;import static org.mockito.ArgumentMatchers.anyLong;import static org.mockito.Mockito.when;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;import static recipe.utility.Mapping.*;import static recipe.utility.ViewName.*;public class IngredientControllerTest {    @Mock    RecipeService recipeService;    @Mock    IngredientService ingredientService;    @Mock    UnitOfMeasureService unitOfMeasureService;    MockMvc mockMvc;    IngredientController ingredientController;    private Long idValue = 1l;    @Before    public void setUp() throws Exception {        MockitoAnnotations.initMocks(this);        ingredientController = new IngredientController(recipeService, ingredientService, unitOfMeasureService);        mockMvc = MockMvcBuilders.standaloneSetup(ingredientController).build();    }    @Test    public void listRecipeIngredients() throws Exception {        final String value = String.format("%s%s%x%s", RECIPE, "/", idValue, INGREDIENTS);        RecipeCommand command = new RecipeCommand();        when(recipeService.findCommandById(anyLong())).thenReturn(command);        mockMvc.perform(get(value))                .andExpect(status().isOk())                .andExpect(view().name(INGREDIENT_LIST));    }    @Test    public void showRecipeIngredient() throws Exception {        IngredientCommand ingredientCommand = new IngredientCommand();        when(ingredientService.findByRecipeIdAndIngredientId(anyLong(), anyLong())).thenReturn(ingredientCommand);        final String path = String.format("%s%s%s%s%s", RECIPE, idValue.toString(), INGREDIENT, idValue.toString(), SHOW);        mockMvc.perform(get(path))                .andExpect(status().isOk())                .andExpect(view().name(SHOW_INGREDIENT));    }    @Test    public void newRecipe() throws Exception {        final String path = String.format("%s%s%s", RECIPE, idValue.toString(), NEW_INGREDIENT);        mockMvc.perform(get(path))                .andExpect(status().isOk())                .andExpect(view().name(INGREDIENT_FORM));    }    @Test    public void saveOrUpdate() throws Exception {        final String path = String.format("%s%s%s", RECIPE, idValue.toString(), INGREDIENT);        IngredientCommand command = new IngredientCommand();        command.setRecipeId(idValue);        command.setId(idValue);        when(ingredientService.saveIngredientCommand(any())).thenReturn(command);        mockMvc.perform(post(path)                .contentType(MediaType.APPLICATION_FORM_URLENCODED)        )                .andExpect(status().is3xxRedirection())                .andExpect(view().name(String.format("%s%x%s", REDIRECT_RECIPE, idValue, V_INGREDIENTS)));    }    @Test    public void updateRecipeIngredient() throws Exception {        final String path = String.format("%s%s%s%s%s", RECIPE, idValue.toString(), INGREDIENT, idValue.toString(), UPDATE);        mockMvc.perform(get(path))                .andExpect(status().isOk())                .andExpect(view().name(SHOW_INGREDIENT));    }    @Test    public void deleteIngredient() throws Exception {        final String path = String.format("%s%s%s%s%s", RECIPE, idValue.toString(), INGREDIENT, idValue.toString(), DELETE);        mockMvc.perform(get(path))                .andExpect(status().is3xxRedirection())                .andExpect(view().name(String.format("%s%x%s", REDIRECT_RECIPE, idValue, V_INGREDIENTS)));    }}